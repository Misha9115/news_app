// Mocks generated by Mockito 5.1.0 from annotations
// in news_paper/test/mockito_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i4;
import 'package:firebase_analytics/observer.dart' as _i2;
import 'package:firebase_database/firebase_database.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:news_paper/domain/entity/articles/articles_dto.dart' as _i8;
import 'package:news_paper/domain/service/analitics_service.dart' as _i5;
import 'package:news_paper/domain/service/network_service/network_service.dart'
    as _i11;
import 'package:news_paper/network/news_dao.dart' as _i7;
import 'package:news_paper/shared/init.dart' as _i9;
import 'package:news_paper/shared/locator.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseAnalyticsObserver_0 extends _i1.Fake
    implements _i2.FirebaseAnalyticsObserver {}

class _FakeQuery_1 extends _i1.Fake implements _i3.Query {}

class _FakeDio_2 extends _i1.Fake implements _i4.Dio {}

/// A class which mocks [AnalyticService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticService extends _i1.Mock implements _i5.AnalyticService {
  MockAnalyticService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAnalyticsObserver getAnalyticsObserver() =>
      (super.noSuchMethod(Invocation.method(#getAnalyticsObserver, []),
              returnValue: _FakeFirebaseAnalyticsObserver_0())
          as _i2.FirebaseAnalyticsObserver);
  @override
  _i6.Future<void> registrationFinish({String? userID}) => (super.noSuchMethod(
      Invocation.method(#registrationFinish, [], {#userID: userID}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> loginFinish({String? userID}) => (super.noSuchMethod(
      Invocation.method(#loginFinish, [], {#userID: userID}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> loginWithGoogle({String? userID}) => (super.noSuchMethod(
      Invocation.method(#loginWithGoogle, [], {#userID: userID}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> searchNews({String? userID, String? searchRequest}) =>
      (super.noSuchMethod(
          Invocation.method(#searchNews, [],
              {#userID: userID, #searchRequest: searchRequest}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> addToFav({String? userID, String? link}) =>
      (super.noSuchMethod(
          Invocation.method(#addToFav, [], {#userID: userID, #link: link}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteToFav({String? userID, String? link}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteToFav, [], {#userID: userID, #link: link}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> changePage({String? pageName}) => (super.noSuchMethod(
      Invocation.method(#changePage, [], {#pageName: pageName}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [NewsDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsDao extends _i1.Mock implements _i7.NewsDao {
  MockNewsDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void saveNews(_i8.ArticlesDto? news, String? userID) =>
      super.noSuchMethod(Invocation.method(#saveNews, [news, userID]),
          returnValueForMissingStub: null);
  @override
  void deleteNews(String? keyS, String? userID) =>
      super.noSuchMethod(Invocation.method(#deleteNews, [keyS, userID]),
          returnValueForMissingStub: null);
  @override
  _i3.Query getNewsQuery(String? userID) =>
      (super.noSuchMethod(Invocation.method(#getNewsQuery, [userID]),
          returnValue: _FakeQuery_1()) as _i3.Query);
}

/// A class which mocks [InitApp].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitApp extends _i1.Mock implements _i9.InitApp {
  MockInitApp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerNotification() =>
      super.noSuchMethod(Invocation.method(#registerNotification, []),
          returnValueForMissingStub: null);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [CustomLocator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomLocator extends _i1.Mock implements _i10.CustomLocator {
  MockCustomLocator() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i11.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_2())
          as _i4.Dio);
  @override
  set dio(_i4.Dio? _dio) => super.noSuchMethod(Invocation.setter(#dio, _dio),
      returnValueForMissingStub: null);
}
